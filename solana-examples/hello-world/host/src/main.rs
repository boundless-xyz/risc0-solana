// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{HELLO_GUEST_ELF, HELLO_GUEST_ID};
use risc0_zkvm::{default_prover, sha::Digestible, ExecutorEnv, ProverOpts};
use std::borrow::Borrow;
use std::fs::File;
use std::io::{self, Write};
use std::rc::Rc;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    print!("Please enter the current nonce: ");
    io::stdout().flush().expect("Unable to access STDIO");

    let mut buffer = String::new();

    io::stdin()
        .read_line(&mut buffer)
        .expect("Unable to read stdin");

    let nonce: u32 = buffer.trim().parse().expect("Unable to parse nonce value");

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // Increment the current nonce for our transaction to be accepted
    let input: u32 = nonce + 1;
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // extract the receipt.
    let standard_prover = default_prover();
    let standard_proof = standard_prover.prove(env, HELLO_GUEST_ELF).unwrap();
    let standard_receipt = standard_proof.receipt;

    println!("Standard Receipt: {:?}", standard_receipt);

    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prover_options = ProverOpts::groth16();
    let prove_info = prover
        .prove_with_opts(env, HELLO_GUEST_ELF, &prover_options)
        .unwrap();

    let receipt = prove_info.receipt;

    let receipt_json =
        serde_json::to_string_pretty(&receipt).expect("Unable to generate JSON file from receipt.");

    let mut receipt_file =
        File::create("receipt.json").expect("Was unable to open file for writing.");
    receipt_file
        .write_all(receipt_json.as_bytes())
        .expect("Unable to write json receipt data to file.");

    let verifier_params = receipt.inner.verifier_parameters();
    let verifieer_params_json = serde_json::to_string_pretty(&verifier_params)
        .expect("Was unable to generate JSON file from verifier_params.");

    let mut verifier_file = File::create("vp.json").expect("Was unable to open file for writing.");

    verifier_file
        .write_all(verifieer_params_json.as_bytes())
        .expect("Unable to write Json VP data to file");

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(HELLO_GUEST_ID).unwrap();
}
