/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VERIFIER_ROUTER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ADD_VERIFIER_DISCRIMINATOR = new Uint8Array([
  165, 72, 135, 225, 67, 181, 255, 135,
]);

export function getAddVerifierDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_VERIFIER_DISCRIMINATOR
  );
}

export type AddVerifierInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountRouter extends string | AccountMeta<string> = string,
  TAccountVerifierEntry extends string | AccountMeta<string> = string,
  TAccountVerifierProgramData extends string | AccountMeta<string> = string,
  TAccountVerifierProgram extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRouter extends string
        ? WritableAccount<TAccountRouter>
        : TAccountRouter,
      TAccountVerifierEntry extends string
        ? WritableAccount<TAccountVerifierEntry>
        : TAccountVerifierEntry,
      TAccountVerifierProgramData extends string
        ? ReadonlyAccount<TAccountVerifierProgramData>
        : TAccountVerifierProgramData,
      TAccountVerifierProgram extends string
        ? ReadonlyAccount<TAccountVerifierProgram>
        : TAccountVerifierProgram,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddVerifierInstructionData = {
  discriminator: ReadonlyUint8Array;
  selector: ReadonlyUint8Array;
};

export type AddVerifierInstructionDataArgs = { selector: ReadonlyUint8Array };

export function getAddVerifierInstructionDataEncoder(): FixedSizeEncoder<AddVerifierInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['selector', fixEncoderSize(getBytesEncoder(), 4)],
    ]),
    (value) => ({ ...value, discriminator: ADD_VERIFIER_DISCRIMINATOR })
  );
}

export function getAddVerifierInstructionDataDecoder(): FixedSizeDecoder<AddVerifierInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['selector', fixDecoderSize(getBytesDecoder(), 4)],
  ]);
}

export function getAddVerifierInstructionDataCodec(): FixedSizeCodec<
  AddVerifierInstructionDataArgs,
  AddVerifierInstructionData
> {
  return combineCodec(
    getAddVerifierInstructionDataEncoder(),
    getAddVerifierInstructionDataDecoder()
  );
}

export type AddVerifierAsyncInput<
  TAccountRouter extends string = string,
  TAccountVerifierEntry extends string = string,
  TAccountVerifierProgramData extends string = string,
  TAccountVerifierProgram extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The router account PDA managing verifiers and required Upgrade Authority address of verifier */
  router?: Address<TAccountRouter>;
  /** The new verifier entry to be created */
  verifierEntry?: Address<TAccountVerifierEntry>;
  /** Program data account (Data of account authority from LoaderV3) of the verifier being added */
  verifierProgramData?: Address<TAccountVerifierProgramData>;
  /**
   * The program executable code account of the verifier program to be added
   * Must be an unchecked account because any program ID can be here
   */
  verifierProgram: Address<TAccountVerifierProgram>;
  /** The owner of the router which must sign this transaction */
  authority: TransactionSigner<TAccountAuthority>;
  /** Required for account initialization */
  systemProgram?: Address<TAccountSystemProgram>;
  selector: AddVerifierInstructionDataArgs['selector'];
};

export async function getAddVerifierInstructionAsync<
  TAccountRouter extends string,
  TAccountVerifierEntry extends string,
  TAccountVerifierProgramData extends string,
  TAccountVerifierProgram extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
>(
  input: AddVerifierAsyncInput<
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgramData,
    TAccountVerifierProgram,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AddVerifierInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgramData,
    TAccountVerifierProgram,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VERIFIER_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    router: { value: input.router ?? null, isWritable: true },
    verifierEntry: { value: input.verifierEntry ?? null, isWritable: true },
    verifierProgramData: {
      value: input.verifierProgramData ?? null,
      isWritable: false,
    },
    verifierProgram: {
      value: input.verifierProgram ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.router.value) {
    accounts.router.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 111, 117, 116, 101, 114])
        ),
      ],
    });
  }
  if (!accounts.verifierEntry.value) {
    accounts.verifierEntry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 101, 114, 105, 102, 105, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 4).encode(expectSome(args.selector)),
      ],
    });
  }
  if (!accounts.verifierProgramData.value) {
    accounts.verifierProgramData.value = await getProgramDerivedAddress({
      programAddress:
        'BPFLoaderUpgradeab1e11111111111111111111111' as Address<'BPFLoaderUpgradeab1e11111111111111111111111'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.verifierProgram.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.router),
      getAccountMeta(accounts.verifierEntry),
      getAccountMeta(accounts.verifierProgramData),
      getAccountMeta(accounts.verifierProgram),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddVerifierInstructionDataEncoder().encode(
      args as AddVerifierInstructionDataArgs
    ),
    programAddress,
  } as AddVerifierInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgramData,
    TAccountVerifierProgram,
    TAccountAuthority,
    TAccountSystemProgram
  >);
}

export type AddVerifierInput<
  TAccountRouter extends string = string,
  TAccountVerifierEntry extends string = string,
  TAccountVerifierProgramData extends string = string,
  TAccountVerifierProgram extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The router account PDA managing verifiers and required Upgrade Authority address of verifier */
  router: Address<TAccountRouter>;
  /** The new verifier entry to be created */
  verifierEntry: Address<TAccountVerifierEntry>;
  /** Program data account (Data of account authority from LoaderV3) of the verifier being added */
  verifierProgramData: Address<TAccountVerifierProgramData>;
  /**
   * The program executable code account of the verifier program to be added
   * Must be an unchecked account because any program ID can be here
   */
  verifierProgram: Address<TAccountVerifierProgram>;
  /** The owner of the router which must sign this transaction */
  authority: TransactionSigner<TAccountAuthority>;
  /** Required for account initialization */
  systemProgram?: Address<TAccountSystemProgram>;
  selector: AddVerifierInstructionDataArgs['selector'];
};

export function getAddVerifierInstruction<
  TAccountRouter extends string,
  TAccountVerifierEntry extends string,
  TAccountVerifierProgramData extends string,
  TAccountVerifierProgram extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
>(
  input: AddVerifierInput<
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgramData,
    TAccountVerifierProgram,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddVerifierInstruction<
  TProgramAddress,
  TAccountRouter,
  TAccountVerifierEntry,
  TAccountVerifierProgramData,
  TAccountVerifierProgram,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VERIFIER_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    router: { value: input.router ?? null, isWritable: true },
    verifierEntry: { value: input.verifierEntry ?? null, isWritable: true },
    verifierProgramData: {
      value: input.verifierProgramData ?? null,
      isWritable: false,
    },
    verifierProgram: {
      value: input.verifierProgram ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.router),
      getAccountMeta(accounts.verifierEntry),
      getAccountMeta(accounts.verifierProgramData),
      getAccountMeta(accounts.verifierProgram),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddVerifierInstructionDataEncoder().encode(
      args as AddVerifierInstructionDataArgs
    ),
    programAddress,
  } as AddVerifierInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgramData,
    TAccountVerifierProgram,
    TAccountAuthority,
    TAccountSystemProgram
  >);
}

export type ParsedAddVerifierInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The router account PDA managing verifiers and required Upgrade Authority address of verifier */
    router: TAccountMetas[0];
    /** The new verifier entry to be created */
    verifierEntry: TAccountMetas[1];
    /** Program data account (Data of account authority from LoaderV3) of the verifier being added */
    verifierProgramData: TAccountMetas[2];
    /**
     * The program executable code account of the verifier program to be added
     * Must be an unchecked account because any program ID can be here
     */
    verifierProgram: TAccountMetas[3];
    /** The owner of the router which must sign this transaction */
    authority: TAccountMetas[4];
    /** Required for account initialization */
    systemProgram: TAccountMetas[5];
  };
  data: AddVerifierInstructionData;
};

export function parseAddVerifierInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddVerifierInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      router: getNextAccount(),
      verifierEntry: getNextAccount(),
      verifierProgramData: getNextAccount(),
      verifierProgram: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddVerifierInstructionDataDecoder().decode(instruction.data),
  };
}
