/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { VERIFIER_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getProofDecoder,
  getProofEncoder,
  type Proof,
  type ProofArgs,
} from '../types';

export const VERIFY_DISCRIMINATOR = new Uint8Array([
  133, 161, 141, 48, 120, 198, 88, 150,
]);

export function getVerifyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VERIFY_DISCRIMINATOR);
}

export type VerifyInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountRouter extends string | AccountMeta<string> = string,
  TAccountVerifierEntry extends string | AccountMeta<string> = string,
  TAccountVerifierProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRouter extends string
        ? ReadonlyAccount<TAccountRouter>
        : TAccountRouter,
      TAccountVerifierEntry extends string
        ? ReadonlyAccount<TAccountVerifierEntry>
        : TAccountVerifierEntry,
      TAccountVerifierProgram extends string
        ? ReadonlyAccount<TAccountVerifierProgram>
        : TAccountVerifierProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyInstructionData = {
  discriminator: ReadonlyUint8Array;
  selector: ReadonlyUint8Array;
  proof: Proof;
  imageId: ReadonlyUint8Array;
  journalDigest: ReadonlyUint8Array;
};

export type VerifyInstructionDataArgs = {
  selector: ReadonlyUint8Array;
  proof: ProofArgs;
  imageId: ReadonlyUint8Array;
  journalDigest: ReadonlyUint8Array;
};

export function getVerifyInstructionDataEncoder(): FixedSizeEncoder<VerifyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['selector', fixEncoderSize(getBytesEncoder(), 4)],
      ['proof', getProofEncoder()],
      ['imageId', fixEncoderSize(getBytesEncoder(), 32)],
      ['journalDigest', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: VERIFY_DISCRIMINATOR })
  );
}

export function getVerifyInstructionDataDecoder(): FixedSizeDecoder<VerifyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['selector', fixDecoderSize(getBytesDecoder(), 4)],
    ['proof', getProofDecoder()],
    ['imageId', fixDecoderSize(getBytesDecoder(), 32)],
    ['journalDigest', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getVerifyInstructionDataCodec(): FixedSizeCodec<
  VerifyInstructionDataArgs,
  VerifyInstructionData
> {
  return combineCodec(
    getVerifyInstructionDataEncoder(),
    getVerifyInstructionDataDecoder()
  );
}

export type VerifyAsyncInput<
  TAccountRouter extends string = string,
  TAccountVerifierEntry extends string = string,
  TAccountVerifierProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The router account PDA managing verifiers */
  router?: Address<TAccountRouter>;
  /** The verifier entry to use, validated using PDA derivation */
  verifierEntry: Address<TAccountVerifierEntry>;
  /**
   * The verifier program to be invoked
   * Must match the address of the program listed in the verifier entry of the specific selector
   * Must be an unchecked account because any program ID can be here
   */
  verifierProgram: Address<TAccountVerifierProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  selector: VerifyInstructionDataArgs['selector'];
  proof: VerifyInstructionDataArgs['proof'];
  imageId: VerifyInstructionDataArgs['imageId'];
  journalDigest: VerifyInstructionDataArgs['journalDigest'];
};

export async function getVerifyInstructionAsync<
  TAccountRouter extends string,
  TAccountVerifierEntry extends string,
  TAccountVerifierProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
>(
  input: VerifyAsyncInput<
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  VerifyInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VERIFIER_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    router: { value: input.router ?? null, isWritable: false },
    verifierEntry: { value: input.verifierEntry ?? null, isWritable: false },
    verifierProgram: {
      value: input.verifierProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.router.value) {
    accounts.router.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 111, 117, 116, 101, 114])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.router),
      getAccountMeta(accounts.verifierEntry),
      getAccountMeta(accounts.verifierProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getVerifyInstructionDataEncoder().encode(
      args as VerifyInstructionDataArgs
    ),
    programAddress,
  } as VerifyInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgram,
    TAccountSystemProgram
  >);
}

export type VerifyInput<
  TAccountRouter extends string = string,
  TAccountVerifierEntry extends string = string,
  TAccountVerifierProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The router account PDA managing verifiers */
  router: Address<TAccountRouter>;
  /** The verifier entry to use, validated using PDA derivation */
  verifierEntry: Address<TAccountVerifierEntry>;
  /**
   * The verifier program to be invoked
   * Must match the address of the program listed in the verifier entry of the specific selector
   * Must be an unchecked account because any program ID can be here
   */
  verifierProgram: Address<TAccountVerifierProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  selector: VerifyInstructionDataArgs['selector'];
  proof: VerifyInstructionDataArgs['proof'];
  imageId: VerifyInstructionDataArgs['imageId'];
  journalDigest: VerifyInstructionDataArgs['journalDigest'];
};

export function getVerifyInstruction<
  TAccountRouter extends string,
  TAccountVerifierEntry extends string,
  TAccountVerifierProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
>(
  input: VerifyInput<
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): VerifyInstruction<
  TProgramAddress,
  TAccountRouter,
  TAccountVerifierEntry,
  TAccountVerifierProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VERIFIER_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    router: { value: input.router ?? null, isWritable: false },
    verifierEntry: { value: input.verifierEntry ?? null, isWritable: false },
    verifierProgram: {
      value: input.verifierProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.router),
      getAccountMeta(accounts.verifierEntry),
      getAccountMeta(accounts.verifierProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getVerifyInstructionDataEncoder().encode(
      args as VerifyInstructionDataArgs
    ),
    programAddress,
  } as VerifyInstruction<
    TProgramAddress,
    TAccountRouter,
    TAccountVerifierEntry,
    TAccountVerifierProgram,
    TAccountSystemProgram
  >);
}

export type ParsedVerifyInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The router account PDA managing verifiers */
    router: TAccountMetas[0];
    /** The verifier entry to use, validated using PDA derivation */
    verifierEntry: TAccountMetas[1];
    /**
     * The verifier program to be invoked
     * Must match the address of the program listed in the verifier entry of the specific selector
     * Must be an unchecked account because any program ID can be here
     */
    verifierProgram: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: VerifyInstructionData;
};

export function parseVerifyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      router: getNextAccount(),
      verifierEntry: getNextAccount(),
      verifierProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getVerifyInstructionDataDecoder().decode(instruction.data),
  };
}
